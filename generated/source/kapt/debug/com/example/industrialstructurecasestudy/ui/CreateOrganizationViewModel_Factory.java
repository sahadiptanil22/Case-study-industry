// Generated by Dagger (https://dagger.dev).
package com.example.industrialstructurecasestudy.ui;

import com.example.industrialstructurecasestudy.repository.LocalOrganizationRepository;
import com.example.industrialstructurecasestudy.repository.RemoteOrganizationRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CreateOrganizationViewModel_Factory implements Factory<CreateOrganizationViewModel> {
  private final Provider<LocalOrganizationRepository> localOrganizationRepositoryProvider;

  private final Provider<RemoteOrganizationRepository> remoteOrganizationRepositoryProvider;

  public CreateOrganizationViewModel_Factory(
      Provider<LocalOrganizationRepository> localOrganizationRepositoryProvider,
      Provider<RemoteOrganizationRepository> remoteOrganizationRepositoryProvider) {
    this.localOrganizationRepositoryProvider = localOrganizationRepositoryProvider;
    this.remoteOrganizationRepositoryProvider = remoteOrganizationRepositoryProvider;
  }

  @Override
  public CreateOrganizationViewModel get() {
    return newInstance(localOrganizationRepositoryProvider.get(), remoteOrganizationRepositoryProvider.get());
  }

  public static CreateOrganizationViewModel_Factory create(
      Provider<LocalOrganizationRepository> localOrganizationRepositoryProvider,
      Provider<RemoteOrganizationRepository> remoteOrganizationRepositoryProvider) {
    return new CreateOrganizationViewModel_Factory(localOrganizationRepositoryProvider, remoteOrganizationRepositoryProvider);
  }

  public static CreateOrganizationViewModel newInstance(
      LocalOrganizationRepository localOrganizationRepository,
      RemoteOrganizationRepository remoteOrganizationRepository) {
    return new CreateOrganizationViewModel(localOrganizationRepository, remoteOrganizationRepository);
  }
}
